%% Sensor Fusion Using Synthetic Radar and Vision Data
% This example shows how to implement a synthetic data simulation for
% tracking and sensor fusion in Simulink(R) with Automatic Driving System
% Toolbox. It closely follows the
% <matlab:web(fullfile(docroot,'driving','examples','sensor-fusion-using-synthetic-radar-and-vision-data.html'))
% Sensor Fusion Using Synthetic Radar and Vision Data> MATLAB(R) example.
%
% Copyright 2017 The MathWorks, Inc.

%% Introduction
% Simulating synthetic radar and vision detections provides the ability to
% create rare and potentially dangerous events and test the vehicle
% algorithms with them. This example covers the entire synthetic data
% workflow in Simulink.

%% Setup and Overview of the Model
% Prior to running this example, the
% <matlab:web(fullfile(docroot,'driving','ref','drivingscenario-class.html'))
% drivingScenario> was used to create the same actors that were defined in
% <matlab:web(fullfile(docroot,'driving','examples','sensor-fusion-using-synthetic-radar-and-vision-data.html'));
% Sensor Fusion Using Synthetic Radar and Vision Data>. The actors were
% recorded using the
% <matlab:web(fullfile(docroot,'driving','ref','drivingscenario.record.html'))
% drivingScenario/record> method. In addition, we got the road boundaries
% information from the scenario using the
% <matlab:web(fullfile(docroot,'driving','ref','roadboundaries.html'))
% drivingScenario/roadBoundaries> method. Both the actors and the road
% boundaries were saved as structs to a file.
%
% The Scenario Reader block reads the actor poses data and the road
% boundaries data from the saved file. The block converts both the actor
% poses and the road boundaries from scenario coordinates to ego
% coordinates. The actor poses are streamed on a bus generated by the
% block.
%
% The actors data is used by the Sensor Simulation subsystem, which
% generates synthetic radar and vision detections. The simulated detections
% are concatenated at the input to the Multi Object Tracker block, whose
% output is a list of confirmed tracks. Finally, the Bird's-Eye Plot block
% visualizes the actors, the vision and radar detections, the confirmed
% tracks and the road boundaries. The following sections describe the main
% blocks of this model.

%%
close
open_system('SyntheticDataSimulinkExample');

%% Simulating Sensor Detections
% In this example, you simulate an ego vehicle that has 6 radar sensors and
% 2 vision sensors covering the 360 degrees field of view. The sensors have
% some overlap and some coverage gap. The ego vehicle is equipped with a
% long-range radar sensor and a vision sensor on both the front and the
% back of the vehicle. Each side of the vehicle has two short-range radar
% sensors, each covering 90 degrees. One sensor on each side covers from
% the middle of the vehicle to the back. The other sensor on each side
% covers from the middle of the vehicle forward.
%
% Double clicking on the Sensor Simulation subsystem, you can see the two
% <matlab:web(fullfile(docroot,'driving','ref','visiondetectiongenerator.html'))
% Vision Detection Generator> blocks, configured to generate detections
% from the front and the back of the ego-vehicle. The output from the
% vision detection generators is connected to a
% <matlab:web(fullfile(docroot,'driving','ref','detectionconcatenation.html'))
% Detection Concatenation> block. Next, there are six
% <matlab:web(fullfile(docroot,'driving','ref','radardetectiongenerator.html'))
% Radar Detection Generator> blocks, configured as described in the
% paragraph above. The outputs of the radar detection generators are
% Concatenated and then clustered using a Detection Clustering block.

%%
open_system('SyntheticDataSimulinkExample/Sensor Simulation')
%% Tracking and Sensor Fusion
% The detections from the vision and radar sensors must first be
% Concatenated to form a single input to the
% <matlab:web(fullfile(docroot,'driving','ref','multiobjecttracker.html'))
% Multi Object Tracker> block. The Concatenation is done using an
% additional Detection Concatention block.
%
% The Multi Object Tracker block is responsible for fusing the data from
% all the detections and tracking the objects around the ego-vehicle. The
% multi-object tracker is configured with the same parameters as we used in
% the 
% <matlab:web(fullfile(docroot,'driving','examples','sensor-fusion-using-synthetic-radar-and-vision-data.html')) corresponding MATLAB example>.
% The output from the Multi Object Tracker block is a list of confirmed tracks.

%% Creating and Propagating Buses
% The inputs and outputs from the various blocks in this example are all
% <matlab:web(fullfile(docroot,'simulink','slref','simulink.bus-class.html'))
% Simulink Buses>. To simplify compiling the model and creating the buses,
% all the Vision Detection Generator, Radar Detection Generator, Multi
% Object Tracker and Detection Concatention blocks have a property that
% defines the source of the output bus name. When set to 'Auto', the buses
% are created automatically and their names are propagated to the block
% that consumes this bus as an input. When set to 'Property', you can
% define the name of the output bus. The following images show the
% detections bus, a single detection bus, the tracks bus, and a single
% track bus.
%%
% 
% <<DetectionsBus.png>>
% 
%%
% 
% <<SingleDetectionBus.png>>
% 
%%
% 
% <<TracksBus.png>>
% 
%%
% 
% <<SingleTrackBus.png>>
% 

%% Display
% A Bird's-Eye Plot block creates and updates the display. You can choose
% if you would like the block to display Actors, Vision and Radar
% detections, Tracks and road boundaries. Based on these choices, the
% appropriate input ports are created and you can connect the corresponding
% buses to each. When enabling Vision or Radar, the appropriate coverage
% areas are shown for all the sensors of that type in the model. The
% following image shows the bird's-eye plot for this example.
%%
sim('SyntheticDataSimulinkExample')
snapnow

%%
h = findall(0,'Name','SyntheticDataSimulinkExample/Bird''s-Eye Plot'); 
close(h)
close_system('SyntheticDataSimulinkExample')
displayEndOfDemoMessage(mfilename)